# auto.py
import base64

# This is your Base64-encoded Python script
encoded_script = """
"""

# Decode → UTF-8 text
decoded_code = base64.b64decode(encoded_script).decode("utf-8")

# Execute the decoded Python code
exec(decoded_code)
